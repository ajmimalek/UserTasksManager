// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserTasksManager.Data;

namespace UserTasksManager.Migrations
{
    [DbContext(typeof(UserTasksContext))]
    partial class UserTasksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.Property<int>("tasksId")
                        .HasColumnType("int");

                    b.Property<int>("usersId")
                        .HasColumnType("int");

                    b.HasKey("tasksId", "usersId");

                    b.HasIndex("usersId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("UserTasksManager.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<float>("Estimate")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Create a project",
                            EndDate = new DateTime(2021, 7, 15, 12, 7, 37, 245, DateTimeKind.Local).AddTicks(1252),
                            Estimate = 5.12f,
                            StartDate = new DateTime(2021, 7, 14, 12, 7, 37, 245, DateTimeKind.Local).AddTicks(152),
                            Status = 0,
                            Title = "Creating a new Project"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Adding Classes to Project",
                            EndDate = new DateTime(2021, 7, 17, 12, 7, 37, 245, DateTimeKind.Local).AddTicks(2546),
                            Estimate = 3.2f,
                            StartDate = new DateTime(2021, 7, 14, 12, 7, 37, 245, DateTimeKind.Local).AddTicks(2521),
                            Status = 0,
                            Title = "Class Modeling"
                        });
                });

            modelBuilder.Entity("UserTasksManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 7, 14, 12, 7, 37, 243, DateTimeKind.Local).AddTicks(7192),
                            Email = "malek.ajmi@se.linedata.com",
                            Password = "malek123",
                            UserName = "ajmimalek",
                            role = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 7, 14, 12, 7, 37, 243, DateTimeKind.Local).AddTicks(7880),
                            Email = "adel.adel@se.linedata.com",
                            Password = "adel336",
                            UserName = "adeladel",
                            role = 1
                        });
                });

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.HasOne("UserTasksManager.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("tasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserTasksManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
